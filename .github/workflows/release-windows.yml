name: Build and Release Windows EXE

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (optional). If empty, the pushed tag or current ref will be used.'
        required: false
        default: ''

jobs:
  build-windows-exe:
    runs-on: windows-latest
    outputs:
      artifact-path: ${{ steps.zip.outputs.zip-path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        shell: pwsh

      - name: Build EXE (packaging script)
        run: |
          $entry = 'src\titansteelworks\gui.py'
          .\packaging\build_exe.ps1 -Entry $entry -DistName "TitanSteelworks.Chatbot" -OneFile $true
        shell: pwsh

      - name: Determine release tag and artifact names
        id: meta
        run: |
          $inputTag = '${{ github.event.inputs.tag }}'
          if ([string]::IsNullOrWhiteSpace($inputTag)) {
            $tag = '${{ github.ref_name }}'
          } else { $tag = $inputTag }
          if ([string]::IsNullOrWhiteSpace($tag)) { $tag = 'local' }
          $zipName = "TitanSteelworks.Chatbot-$tag-win-x64.zip"
          $exeName = "TitanSteelworks.Chatbot.exe"
          Write-Output "::set-output name=tag::$tag"
          Write-Output "::set-output name=zip-name::$zipName"
          Write-Output "::set-output name=exe-name::$exeName"
        shell: pwsh

      - name: Generate SHA256 checksum
        run: |
          $exe = Join-Path -Path $PWD -ChildPath ("dist\${{ steps.meta.outputs.exe-name }}")
          Get-FileHash -Path $exe -Algorithm SHA256 | ForEach-Object { $_.Hash } | Out-File -FilePath (Join-Path -Path $PWD -ChildPath "dist\${{ steps.meta.outputs.exe-name }}.sha256") -Encoding ascii
        shell: pwsh

      - name: Zip EXE + checksum
        id: zip
        run: |
          $exe = Join-Path -Path $PWD -ChildPath ("dist\${{ steps.meta.outputs.exe-name }}")
          $sha = "$exe.sha256"
          $zip = Join-Path -Path $PWD -ChildPath ("dist\${{ steps.meta.outputs.zip-name }}")
          if (Test-Path $zip) { Remove-Item $zip }
          Compress-Archive -Path $exe, $sha -DestinationPath $zip
          Write-Output "::set-output name=zip-path::$zip"
        shell: pwsh

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          release_name: ${{ steps.meta.outputs.tag }}
          body: |
            Automated Windows single-file EXE build for tag ${{ steps.meta.outputs.tag }}.
          draft: false
          prerelease: false

      - name: Upload release asset (zip)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.zip.outputs.zip-path }}
          asset_name: ${{ steps.meta.outputs.zip-name }}
          asset_content_type: application/zip
